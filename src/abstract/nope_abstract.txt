"""
    Abstract

The `Abstract` module provides foundational abstract types and interfaces for modeling a coevolutionary system. 
These types set the groundwork for further specification and concrete implementation across the ecosystem, 
species, genotypes, phenotypes, interactions, and various other components.

# Sections
1. **Entity Types**: Includes core entity types like genotypes, phenotypes, individuals, species, and ecosystems.
2. **Interaction Types**: Defines types related to problems, observations, and interactions between entities.
3. **Genetic Algorithm and Reproduction Types**: Encapsulates core components of the genetic algorithm, including evaluations, replacements, selections, and mutations.
4. **Analysis Types**: Types related to storing and analyzing the data produced throughout the coevolutionary process.
5. **Utility Types**: Miscellaneous utility types used throughout the coevolutionary system.
"""
module Abstract

"""
Entity Types
"""

"""
    Gene

A discrete component contributing to the genetic information of a genotype.
"""
abstract type Gene end

"""
    Genotype

The fundamental type representing the genetic information of an entity. It serves as a blueprint 
from which phenotypes are derived.
"""
abstract type Genotype end

abstract type VectorGenotype <: Genotype end

abstract type GeneticProgramGenotype <: Genotype end

"""
    GenotypeCreator

Describes the configuration for generating a genotype.
"""
abstract type GenotypeCreator end

abstract type VectorGenotypeCreator <: GenotypeCreator end

abstract type GeneticProgramGenotypeCreator <: GenotypeCreator end


"""
    PhenotypeCreator

Transforms a genotype into a structured data representation, known as a phenotype.
"""

abstract type Phenotype end

abstract type PhenotypeCreator end

"""
    Individual

Represents a single evolutionary instantiation of a genotype.
"""
abstract type Individual end

abstract type IndividualCreator end


abstract type AbstractSpecies end

"""
    SpeciesCreator

Defines the configuration for creating a species.
"""
abstract type SpeciesCreator end

"""
    Ecosystem

Represents a collection of species.
"""
abstract type Ecosystem end

"""
    get_pheno_dict(eco::Ecosystem)

Return a dictionary mapping individual IDs to phenotypes for a given ecosystem. Must be implemented
for specific ecosystem subtypes.
"""
function get_pheno_dict(::Ecosystem)
    throw(ErrorException("Required method `get_pheno_dict` not implemented for Ecosystem."))
end

"""
    EcosystemCreator

Defines the configuration for creating an ecosystem.
"""
abstract type EcosystemCreator end 

"""
Interaction Types
"""

"""
    Problem

Represents a task or challenge to be addressed by entities.
"""
abstract type Problem end

"""
    MatchMaker

Chooses or designates specific entities to tackle or address a problem.
"""
abstract type MatchMaker end

"""
    Observation

Encapsulates data or insights produced from an interaction between entities.
"""
abstract type Observation end

"""
    ObservationCreator

Specifies the type and nature of data to be collected from an interaction.
"""
abstract type ObservationCreator end


abstract type Report end

abstract type Reporter end

abstract type Metric end 

abstract type GenotypeMetric <: Metric end

abstract type EvaluationMetric <: Metric end

abstract type ObservationMetric <: Metric end

"""
    DomainCreator

Defines the configuration of an interactive domain or environment.
"""
abstract type DomainCreator end

"""
    Job

Describes a unit or piece of evaluation work that a worker needs to execute.
"""
abstract type Job end

"""
    JobCreator

Lays out a series of jobs or tasks that need to be undertaken.
"""
abstract type JobCreator end

"""
Genetic Algorithm and Reproduction Types
"""

"""
    Evaluator


"""
abstract type Evaluator end

"""
    Evaluation

Stores the evaluation or assessment information for an individual.
"""
abstract type Evaluation end

abstract type FitnessEvaluation <: Evaluation end
"""
    Evaluator

Specifies the configuration for carrying out evaluations.
"""
abstract type Evaluator end


abstract type Reproducer end 

"""
    Replacer

Enables replacement of one generation of a population with the next.
"""
abstract type Replacer end

"""
    Selector

Picks or chooses parents from a population based on certain criteria.
"""
abstract type Selector end

"""
    Recombiner

Facilitates generation of offspring from the selected set of parents.
"""
abstract type Recombiner end

"""
    Mutator

Introduces genetic mutations into offspring.
"""
abstract type Mutator end

"""
Analysis Types
"""

"""
    Archivist

Responsible for logging, storing, and managing data produced through the coevolutionary process.
"""
abstract type Archiver end

"""
Utility Types
"""

"""
"""
abstract type Criterion end

end